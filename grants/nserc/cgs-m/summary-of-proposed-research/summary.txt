As software grows in ubiquity, understanding the properties of software products becomes increasingly essential.
One approach to certified programming is to use programming languages that by their very nature provide correctness guarantees. Such languages typically include advanced type systems to make these guarantees: the programmer can specify precise types for the programs they write, thus making their assumptions about the program explicit. Since bugs arise when implicit assumptions are violated, the use of advanced type systems can reduce the likelihood of bugs.
The Beluga project aims to change the way we develop and reason about formal systems. It provides an advanced language with primitives, high-level abstractions, and tools to directly represent, verify, and communicate formal guarantees about software systems.
The goal of my research is to improve on the state-of-the-art methodologies for certified programming. To do so, my specific objective is to design and implement a proof search engine and interactive program development environment as an extension to Beluga, together with a test harness that allows to reply interactive proofs.
Proof search will be organized around two phases. In the first, deterministic inferences are made freely. In the second, the non-determinism of proof search is resolved by the programmer composing program fragments.
